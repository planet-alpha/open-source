# Grafana 客户侧交付成功率与提交失败率告警配置（Prometheus 数据源）
# 说明：
# 1) 将 P1809F7CD0C75ACF3 替换为你的 Prometheus 数据源 UID（Grafana -> 数据源 -> Prometheus -> UID）
# 2) 将本文件放到 Grafana provisioning 目录（如 /etc/grafana/provisioning/alerting/），并重启/重新加载 Grafana
# 3) 文件内包含两个告警组：交付成功率过低、提交失败率信息级（5m）

apiVersion: 1

groups:
  # =============================== 客户侧交付成功率过低 ===============================
  - orgId: 1
    name: Customer Deliver Quality Alerts
    folder: Business-Customer-Deliver-Quality
    interval: 1m
    rules:
      - uid: deliver_fail_rate_high
        title: CustomerDeliverSuccessRateLow
        condition: C
        data:
          - refId: A
            relativeTimeRange:
              from: 600
              to: 0
            datasourceUid: P1809F7CD0C75ACF3
            model:
              datasource:
                type: prometheus
                uid: P1809F7CD0C75ACF3
              editorMode: code
              expr: |
                # 成功率(%) = 100 * success / total
                # 分组按 (name, appName, cId, appId)
                (
                  100 * (
                    sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat=~"^(DELIVRD|ACCEPTD)$"}[5m]))
                    /
                    clamp_min(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[5m])), 1)
                  )
                )
                and (
                  # 基线去噪：总量 >= 100（total 包含所有状态，不排除超时）
                  sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[5m])) >= 100
                )
              interval: ""
              intervalMs: 1000
              legendFormat: "客户{{name}}-{{cId}} 应用{{appName}}-{{appId}} 成功比例(%)"
              maxDataPoints: 43200
              instant: true
              range: false
              refId: A
          - refId: C
            relativeTimeRange:
              from: 600
              to: 0
            datasourceUid: __expr__
            model:
              conditions:
                - evaluator:
                    params: [99]
                    type: lt
                  operator:
                    type: and
                  query:
                    params: [A]
                  reducer:
                    type: last
                  type: query
              datasource:
                type: __expr__
                uid: __expr__
              expression: A
              intervalMs: 1000
              maxDataPoints: 43200
              refId: C
              type: threshold
        noDataState: OK
        execErrState: Error
        for: 5m
        annotations:
          summary: "客户{{ $labels.name }}-{{ $labels.cId }} 应用{{ $labels.appName }}-{{ $labels.appId }} 成功比例 ≤ 99%"
          description: |
            当前成功比例：{{ printf "%.2f" $values.A.Value }}%（窗口 5m，基线总量阈值：100，总量包含超时）。
            指标计算：成功率(%) = 100 × success(DELIVRD|ACCEPTD) / total(包含所有状态)
        labels:
          severity: warning
          category: business-deliver-quality
          alert_type: success_rate
  
  # =============================== 客户侧回执下降率 ===============================
      - uid: customer_receipt_drop_rate
        title: CustomerReceiptDropRate
        condition: C
        data:
          # A: 回执下降比例(%)，相对30m动态基线，且满足绝对下降与总量基线门槛
          - refId: A
            relativeTimeRange:
              from: 1800
              to: 0
            datasourceUid: P1809F7CD0C75ACF3
            model:
              datasource:
                type: prometheus
                uid: P1809F7CD0C75ACF3
              editorMode: code
              expr: |
                # 计算回执下降比例(%)，相对30m动态基线，并应用双门槛过滤
                clamp_min(
                  (
                    # R_base: 30m基线回执比例(%)
                    100 * avg_over_time((
                      sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))
                      /
                      clamp_min(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat!~"^timeout$"}[1m])), 1)
                    )[30m:1m])
                    
                    -
                    
                    # R_cur: 当前1m回执比例(%)
                    100 * (
                      sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))
                      /
                      clamp_min(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat!~"^timeout$"}[1m])), 1)
                    )
                  )
                  /
                  # 除以基线比例，得到相对下降比例
                  100 * avg_over_time((
                    sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))
                    /
                    clamp_min(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat!~"^timeout$"}[1m])), 1)
                  )[30m:1m])
                  * 100, 0
                )
                and (
                  # 绝对下降门槛：30m内1m回执数均值 - 当前1m回执数 >= MIN_ABS_DROP
                  avg_over_time(sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))[30m:1m])
                  -
                  sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))
                  >= 10
                )
                and (
                  # 总量基线门槛：30m内1m非超时总量的均值 >= MIN_BASELINE_TOTAL
                  avg_over_time(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat!~"^timeout$"}[1m]))[30m:1m]) >= 100
                )
                and (
                  # 基线回执比例必须大于0，避免除零错误
                  100 * avg_over_time((
                    sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))
                    /
                    clamp_min(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat!~"^timeout$"}[1m])), 1)
                  )[30m:1m]) > 0
                )
              interval: ""
              intervalMs: 1000
              instant: true
              legendFormat: "name={{name}}, appName={{appName}}, cId={{cId}}, appId={{appId}} | 下降比例(%)"
              maxDataPoints: 43200
              range: false
              refId: A
          
          # B: 当前1m回执比例(%)
          - refId: B
            relativeTimeRange:
              from: 1800
              to: 0
            datasourceUid: P1809F7CD0C75ACF3
            model:
              datasource:
                type: prometheus
                uid: P1809F7CD0C75ACF3
              editorMode: code
              expr: |
                100 * (
                  sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))
                  /
                  clamp_min(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat!~"^timeout$"}[1m])), 1)
                )
              interval: ""
              intervalMs: 1000
              instant: true
              legendFormat: "name={{name}}, appName={{appName}}, cId={{cId}}, appId={{appId}} | 当前1m回执比例(%)"
              maxDataPoints: 43200
              range: false
              refId: B
          
          # D: 30m基线回执比例(%)
          - refId: D
            relativeTimeRange:
              from: 1800
              to: 0
            datasourceUid: P1809F7CD0C75ACF3
            model:
              datasource:
                type: prometheus
                uid: P1809F7CD0C75ACF3
              editorMode: code
              expr: |
                100 * avg_over_time((
                  sum by(name, appName,cId,appId)(increase(customer_deliver_resp_total{cId=~".*", name=~".*", appId=~".*", appName=~".*"}[1m]))
                  /
                  clamp_min(sum by(name, appName,cId,appId)(increase(customer_deliver_total{cId=~".*", name=~".*", appId=~".*", appName=~".*", stat!~"^timeout$"}[1m])), 1)
                )[30m:1m])
              interval: ""
              intervalMs: 1000
              instant: true
              legendFormat: "name={{name}}, appName={{appName}}, cId={{cId}}, appId={{appId}} | 30m基线回执比例(%)"
              maxDataPoints: 43200
              range: false
              refId: D
          
          # C: 阈值判断——当下降比例 ≥ RECEIPT_DROP_PCT_THRESHOLD 触发
          - refId: C
            relativeTimeRange:
              from: 1800
              to: 0
            datasourceUid: __expr__
            model:
              conditions:
                - evaluator:
                    params: [5]
                    type: gt
                  operator:
                    type: and
                  query:
                    params: [A]
                  reducer:
                    type: last
                  type: query
              datasource:
                type: __expr__
                uid: __expr__
              expression: A
              intervalMs: 1000
              maxDataPoints: 43200
              refId: C
              type: threshold
        noDataState: OK
        execErrState: Error
        for: 3m
        annotations:
          summary: "客户回执下降率异常: name={{ $labels.name }}, appName={{ $labels.appName }}, cId={{ $labels.cId }}, appId={{ $labels.appId }}"
          description: |
            监控数据详情（含实时数值）：
            - 标识信息：name={{ $labels.name }}, appName={{ $labels.appName }}, cId={{ $labels.cId }}, appId={{ $labels.appId }}
            - 当前1m回执比例 R_cur(%)：{{ printf "%.2f" (index $values "B") }} （查询B：最近1分钟 resp_1m / non_timeout_1m）
            - 30m基线回执比例 R_base(%)：{{ printf "%.2f" (index $values "D") }} （查询D：${BASELINE_WINDOW:-30m}区间内 R_cur 的1m均值）
            - 相对下降比例 DROP_PCT(%)：{{ printf "%.2f" (index $values "A") }} （查询A：clamp_min((R_base - R_cur)/R_base*100, 0)）
 
        labels:
          severity: warning
          category: business-customer-receipt
          alert_type: receipt_drop_rate
